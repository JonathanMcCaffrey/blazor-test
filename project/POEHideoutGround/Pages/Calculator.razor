@page "/calculator"
@inject HttpClient Http

<h1>Calculator</h1>

<div class="alert alert-primary" role="alert">
    Tool for editing hideout data. This is not a comprehensive hideout design tool, but more of a branching off point to get you started!
</div>

<p>
    This tool expects the usage of the <a href="https://pathofexile.gamepedia.com/Celestial_Nebula_Hideout">Celestial Nebula Hideout</a>, and is currently not tested for any other hideout variant.
</p>

@if (groundData == null || waterData == null || grassPatchesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <div class="form-group">
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="ground" checked @onchange="eventArgs => { GroundToggle(eventArgs.Value); }" />
                <label class="custom-control-label" for="ground">Enable ground tiles.</label>
            </div>

            <div class="form-group row">
                <label for="ground">Ground Choice</label>
                <select disabled="@groundDisabled" class="form-control" @bind="@SelectedGroundKey" >
                    <option value="@DefaultGroundTile.Key" selected>@DefaultGroundTile.Name (@DefaultGroundTile.Var)</option>

                    @foreach (var ground in groundData)
                    {
                        <option value="@ground.Key">@ground.Name (@ground.Var)</option>
                    }
                </select>

            </div>

        </div>

        <div class="form-group">
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="water" @onchange="eventArgs => { WaterToggle(eventArgs.Value); }" />
                <label class="custom-control-label" for="water">Enable water tiles.</label>
            </div>

            <div class="form-group row">
                <label for="ground">Water Choice</label>
                <select disabled="@waterDisabled" class="form-control" @bind="@SelectedWaterKey">
                    <option value="@DefaultWaterTile.Key" selected>@DefaultWaterTile.Name (@DefaultWaterTile.Var)</option>

                    @foreach (var water in waterData)
                    {
                        <option value="@water.Key">@water.Name (@water.Var)</option>
                    }
                </select>
            </div>

        </div>


        <div class="form-group">
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="grassPatches" @onchange="eventArgs => { GrassPatchesToggle(eventArgs.Value); }" />
                <label class="custom-control-label" for="grassPatches">Enable grass patches.</label>
            </div>

            <div class="form-group row">
                <label for="ground">Grass Patches Choice</label>
                <select disabled="@grassPatchesDisabled" class="form-control" @bind="@SelectedGrassPatchesKey">
                    <option value="@DefaultGrassPatchesTile.Key" selected>@DefaultGrassPatchesTile.Name (@DefaultGrassPatchesTile.Var)</option>

                    @foreach (var grassPatches in grassPatchesData)
                    {
                        <option value="@grassPatches.Key">@grassPatches.Name (@grassPatches.Var)</option>
                    }
                </select>
            </div>

            <div class="form-group row">
                <label class="col-2 col-form-label">Placement Chaos</label>
                <div class="col-10">
                    <input disabled="@grassPatchesDisabled" class="form-control" type="number" @bind="GrassPlacementChaos">
                </div>
                <small id="chaosHelp" class="form-text text-muted">Randomness of the placement, for more organically placed grass.</small>
            </div>

            <div class="form-group row">
                <label class="col-2 col-form-label">Extra Spacing</label>
                <div class="col-10">
                    <input disabled="@grassPatchesDisabled" class="form-control" type="number" @bind="GrassExtraSpacing">
                </div>
                <small id="spacingHelp" class="form-text text-muted">Extra spacing between grass, to spread out grass patches.</small>
            </div>

        </div>

    </form>

    <pre>@layoutData</pre>

    <button class="btn btn-primary" @onclick="Generate">Generate</button>

        @if(currentCount > 0)
        {
            <p><br/>@currentCount tiles generated.</p>
        }
   
}

@code {

    static TileData DefaultGroundTile = new TileData(name: "Dirt Ground", var:"2", hash: "1798490749", key: 9);
    static TileData DefaultWaterTile = new TileData(name: "Water Plane", var: "22", hash: "1179014731", key: 3);
    static TileData DefaultGrassPatchesTile = new TileData(name: "Grass Patch", var: "4", hash: "3856837925", key: 1);


    public bool groundDisabled { get; set; } = false;
    void GroundToggle(object checkedValue)
    {
        groundDisabled = !(bool)checkedValue;
    }

    public bool waterDisabled { get; set; } = true;
    void WaterToggle(object checkedValue)
    {
        waterDisabled = !(bool)checkedValue;
    }

    public bool grassPatchesDisabled { get; set; } = true;
    void GrassPatchesToggle(object checkedValue)
    {
        grassPatchesDisabled = !(bool)checkedValue;
    }

    int SelectedGroundKey { get; set; } = DefaultGroundTile.Key;
    int SelectedWaterKey { get; set; } = DefaultWaterTile.Key;
    int SelectedGrassPatchesKey { get; set; } = DefaultGrassPatchesTile.Key;

    #region varibles
    int minX = 153;
    int minY = 559;
    int maxX = 560;
    int maxY = 153;

    int xOffset = 6;
    int yOffset = 6;


    int largeTileDimensions = 69;

    int grassPatchDimensions = 30;

    private int currentCount = 0;

    string layoutData = "";

    string tileUsed = "Grass Patch";//"Water Tile";
    string tileHash = "3856837925";//"1179014731";
    string tileVariant = "4";//"22";

    string sandTile = "Sand Ground";
    string sandTileHash = "1900098565";
    string sandTileVariant = "2";

    string medSquareVariant = "21";
    string largeSquareVariant = "22";
    string largeCircleVariant = "26";


    string defaultRotation = "0";
    string invertedRotation = "32768";
    // Rotation Data
    //Rot=49152
    //Rot=32768
    //Rot=16385
    //Rot

    string flippedValue = "1";

    //Min = { Hash=1179014731, X=153, Y=559, Rot=0, Flip=0, Var=22 }
    //Max = { Hash=1179014731, X=560, Y=153, Rot=0, Flip=0, Var=22 }


    public TileData[] groundData;
    public TileData[] waterData;
    public TileData[] grassPatchesData;

    protected override async Task OnInitializedAsync()
    {
        groundData = await Http.GetFromJsonAsync<TileData[]>("data/ground.json");
        waterData = await Http.GetFromJsonAsync<TileData[]>("data/water.json");
        grassPatchesData = await Http.GetFromJsonAsync<TileData[]>("data/grassPatches.json");
    }

    public class TileData
    {
        public string Name { get; set; }
        public string Var { get; set; }
        public string Hash { get; set; }
        public int Key { get; set; }

        public TileData() { }
        public TileData(string name, string var, string hash, int key)
        {
            Name = name;
            Var = var;
            Hash = hash;
            Key = key;
        }
    }


    public TileData SelectedGroundTile
    {
        get
        {
            if(groundDisabled)
            {
                return null;
            }

            foreach (var tile in groundData)
            {
                if (tile.Key == SelectedGroundKey)
                {
                    return tile;
                }
            }

            return null;
        }
    }

    public TileData SelectedWaterTile
    {
        get
        {
            if (waterDisabled)
            {
                return null;
            }

            foreach (var tile in waterData)
            {
                if (tile.Key == SelectedWaterKey)
                {
                    return tile;
                }
            }

            return null;
        }
    }

    public TileData SelectedGrassPatchesTile
    {
        get
        {
            if (grassPatchesDisabled)
            {
                return null;
            }

            foreach (var tile in grassPatchesData)
            {
                if (tile.Key == SelectedGrassPatchesKey)
                {
                    return tile;
                }
            }

            return null;
        }
    }



    #endregion



    private void Generate()
    {
        ClearLayoutData();
        GenerateGround();
        GenerateWater();
        GenerateGrassPatches();

        ErrorCatching();
    }

    private void ClearLayoutData()
    {
        currentCount = 0;
        layoutData = "";
    }

    private void ErrorCatching()
    {
        if(layoutData == "")
        {
            layoutData = "No layout could be generated. Please ensure you have selected a tile, and you have it's generation enabled.";
        }
    }

    private void GenerateGround()
    {
        if(SelectedGroundTile == null) { return; }

        int debugLimit = 0;
        for (int x = minX + xOffset; x <= maxX; x += largeTileDimensions)
        {
            for (int y = minY - yOffset; y >= maxY; y -= largeTileDimensions)
            {
                layoutData += $"{SelectedGroundTile.Name} = {{ Hash={SelectedGroundTile.Hash}, X={x}, Y={y}, Rot={defaultRotation}, Flip=0, Var={SelectedGroundTile.Var} }}\n";


                currentCount++;
                if (debugLimit++ > 10)
                {
                    //    return;
                }
            }
        }
    }


    private void GenerateWater()
    {
        if (SelectedWaterTile == null) { return; }


        for (int x = minX + xOffset; x <= maxX; x += largeTileDimensions)
        {
            for (int y = minY - yOffset; y >= maxY; y -= largeTileDimensions)
            {
                layoutData += $"{SelectedWaterTile.Name} = {{ Hash={SelectedWaterTile.Hash}, X={x}, Y={y}, Rot={defaultRotation}, Flip=0, Var={SelectedWaterTile.Var} }}\n";

                currentCount++;
            }
        }
    }



    private int _grassPlacementChaos = 24;
    public int GrassPlacementChaos {
        get {
            return _grassPlacementChaos;
        }

        set {
            if (value > 0 && value < 48)
            {
                _grassPlacementChaos = value;
            }
            else if(value < 0)
            {
                _grassPlacementChaos = 0;
            }
            else if (value > 48)
            {
                _grassPlacementChaos = 48;
            }
        }
    }

    private int _grassExtraSpacing = 0;
    public int GrassExtraSpacing
    {
        get
        {
            return _grassExtraSpacing;
        }

        set
        {
            if (value > 0 && value < 48)
            {
                _grassExtraSpacing = value;
            }
            else if (value < 0)
            {
                _grassExtraSpacing = 0;
            }
            else if (value > 48)
            {
                _grassExtraSpacing = 48;
            }
        }
    }

    private void GenerateGrassPatches()
    {
        if (SelectedGrassPatchesTile == null) { return; }

        var random = new Random();

        int debugLimit = 0;

        int extraOffset = extraOffset = GrassExtraSpacing / 2;


        for (int x = minX + xOffset + extraOffset; x <= maxX; x += largeTileDimensions + GrassExtraSpacing)
        {
            for (int y = minY - yOffset + extraOffset; y >= maxY; y -= largeTileDimensions + GrassExtraSpacing)
            {
                var xRand = random.NextDouble() * GrassPlacementChaos;
                var yRand = random.NextDouble() * GrassPlacementChaos;

                int newX = (int)(xRand + x);
                int newY = (int)(yRand + y);

                newX = newX < minX ? newX = minX : newX > maxX ? maxX : newX;
                newY = newY > minY ? newY = minY : newY < maxY ? maxY : newY;

                layoutData += $"{SelectedGrassPatchesTile.Name} = {{ Hash={SelectedGrassPatchesTile.Hash}, X={newX}, Y={newY}, Rot={defaultRotation}, Flip=0, Var={SelectedGrassPatchesTile.Var} }}\n";

                currentCount++;

                if (debugLimit++ > 10)
                {
                    //    return;
                }


            }
        }
    }

    private void GenerateCircleLayout()
    {
        for (int x = minX; x < maxX; x += largeTileDimensions)
        {
            for (int y = minY; y < maxY; y += largeTileDimensions)
            {
                layoutData += $"{{{tileUsed}}} = {{ Hash={tileHash}, X={x}, Y={y}, Rot={defaultRotation}, Flip=0, Var={largeCircleVariant} }}\n";
            }
        }
    }
}
